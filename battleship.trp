import lists
import string

let val esc = "\u001b[0m"
    val sea = "\u001b[38;5;20m" ^ "~" ^ esc
    val sub = "\u001b[38;5;125m" ^ "S" ^ esc
    val car = "\u001b[38;5;200m" ^ "C" ^ esc
    val sec = "?"
    val hit = "o"
    val mis = "x"


    (* Prints a grid to the terminal. 
       Note the declassification of the blocking level has to be explicit,
       as the function can branch on classified information.
     *)
    fun print_grid g = 
	let pini authority
	    val _ = 
		let fun convert_lines l = foldl (fn (x, y) => y ^ case x of
						    "EMPTY" => sea
						  | "SUBMARINE" => sub
						  | "CARRIER"  => car
						  | "HIDDEN" => sec 
						  | "HIT" => hit
						  | "MISS" => mis  
						) "" l
		in map (fn x => print x) (map (fn x => convert_lines x) g)
		end
	in () end

    (* convenience functions for accessing grid positions *)
    fun get g x =
	case g of
	    [] => []
	  | y::ys  => if x > 0 then get ys (x-1) else y
    fun get_loc g (x, y) = get (get g y) x

    (* convenience functions for setting a grid position value *)
    fun set g x value = 
	case g of 
	    [] => []
	  | y::ys => if x > 0 then y::(set ys (x-1) value) else value::ys
    fun set_loc g (x,y) value = set g y (set (get g y) x value)

    fun read_input () = 
	let val input = inputLine ()
	    fun f x = case x of
			  "A" => 0 | "B" => 1 | "C" => 2 | "D" => 3 | "E" => 4
			| "F" => 5 | "G" => 6 | "H" => 7 | "I" => 8 | "J" => 9
	    fun g x = case x of
			  "0" => 0 | "1" => 1 | "2" => 2 | "3" => 3 | "4" => 4
			| "5" => 5 | "6" => 6 | "7" => 7 | "8" => 8 | "9" => 9
	in (f (charAt input 0), g (charAt input 1))
	end

    val tracker = let val tmp = map (fn x => "HIDDEN") (range 10)
		  in map (fn x => tmp) (range 10) end
    val grid = let val tmp = map (fn x => "EMPTY") (range 10)
	       in (set_loc (map (fn x => tmp) (range 10)) (0,0) "SUBMARINE") raisedTo `{secret}` end


    (* shoot at the location (x,y) and return result *)
    fun shoot (x, y) =
	let val target = get_loc grid (x, y)
	in case target of
	       "EMPTY" => "MISS"
	     | _ => "HIT"
	end
	

    fun main_loop (track, setup) =
	let val _ =  print_grid track; print "+----------+"; print_grid setup
            val input = read_input ()
	    val shot = shoot input
	    val new_tracker = set_loc track input shot
	in main_loop (new_tracker, setup) end
in
    main_loop (tracker, grid)
(*    val game = register ("game", self(), authority)
    val p2 = whereis ("@battleship-p2", "game")

in let val msg = receive [hn x => x]
       val trg = let pini authority
                   val shot = shoot (read_input())
		 in declassify (shot, authority, `{}`)
		 end
   in send (p2, trg) end*)
end
